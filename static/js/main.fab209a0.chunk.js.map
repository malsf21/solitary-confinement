{"version":3,"sources":["components/Card/Card.js","components/Game/Game.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","props","handler","num","marginControl","this","nomargin","card","className","src","process","display","suit","alt","onClick","Component","SUITS","SPADES","HEARTS","CLUBS","DIAMONDS","Game","resetGame","setState","stage","deck","generateShuffledDeck","foundations","number","maneuvers","selectedManeuver","i","push","shuffleDeck","j","x","length","Math","floor","random","checkSequence","zone","top","state","trySequence","maneuver","foundation","unshift","shift","tryLayer","getNumAvailableMoves","moves","getGameState","handleManeuver","handleFoundation","fluid","md","map","value","key","xs","githubLink","App","bg","variant","Brand","href","role","aria-label","Link","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fab209a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n    handleClick = () => {\n        if (this.props.handler){\n            this.props.handler(this.props.num)\n        }\n    }\n    render(){\n        let marginControl = !this.props.nomargin ? \"mx-auto\" : \"\"\n        if (!this.props.card){\n            return <img \n                className={\"img-fluid card \" + marginControl} \n                src={process.env.PUBLIC_URL + '/cards/B.svg'} \n                alt=\"Card back\" \n                onClick={this.handleClick}\n            />\n        }\n        return (\n            <img \n                className={\"img-fluid card \" + marginControl}\n                src={process.env.PUBLIC_URL + '/cards/' + this.props.card.display + this.props.card.suit + '.svg'} \n                alt={\"Playing card, \" + this.props.card.display + \" of \" + this.props.card.suit}\n                onClick={this.handleClick}\n            />\n        )\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport Card from '../Card/Card';\n\n// const SUITS = {\n//     SPADES: \"♠\",\n//     HEARTS: \"♥\",\n//     CLUBS: \"♣\",\n//     DIAMONDS: \"♦\"\n// }\n\nconst SUITS = {\n    SPADES: \"S\",\n    HEARTS: \"H\",\n    CLUBS: \"C\",\n    DIAMONDS: \"D\"\n}\n\nclass Game extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n            stage: \"layer\",\n            deck: this.generateShuffledDeck(),\n            foundations: [\n                [{number: 1, display: \"A\", suit: SUITS.SPADES}],\n                [{number: 1, display: \"A\", suit: SUITS.HEARTS}],\n                [{number: 1, display: \"A\", suit: SUITS.CLUBS}],\n                [{number: 1, display: \"A\", suit: SUITS.DIAMONDS}]\n            ],\n            maneuvers: [ [], [], [], [], [], [], [], [] ], // 8 empty maneuver slots\n            selectedManeuver: null\n        };\n    }\n    resetGame = () => {\n        this.setState({\n            stage: \"layer\",\n            deck: this.generateShuffledDeck(),\n            foundations: [\n                [{number: 1, display: \"A\", suit: SUITS.SPADES}],\n                [{number: 1, display: \"A\", suit: SUITS.HEARTS}],\n                [{number: 1, display: \"A\", suit: SUITS.CLUBS}],\n                [{number: 1, display: \"A\", suit: SUITS.DIAMONDS}]\n            ],\n            maneuvers: [ [], [], [], [], [], [], [], [] ], // 8 empty maneuver slots\n            selectedManeuver: null\n        })\n    }\n    generateShuffledDeck = () => {\n        let deck = []\n        for (let i = 2; i < 14; i++){\n            let display\n            switch (i) {\n                case 11:\n                    display = \"J\"\n                    break\n                case 12:\n                    display = \"Q\"\n                    break \n                case 13:\n                    display = \"K\"\n                    break\n                default:\n                    display = i\n            }\n            deck.push({number: i, display: display, suit: SUITS.SPADES})\n            deck.push({number: i, display: display, suit: SUITS.HEARTS})\n            deck.push({number: i, display: display, suit: SUITS.CLUBS})\n            deck.push({number: i, display: display, suit: SUITS.DIAMONDS})\n        }\n        return this.shuffleDeck(deck)\n    }\n\n    shuffleDeck = deck => {\n        let i,j,x;\n        for (i = deck.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1))\n            x = deck[i]\n            deck[i] = deck[j]\n            deck[j] = x\n        }\n        return deck\n    }\n\n    /*\n     * @param {Card} card: a card object representing what the player is trying to place - has suit, display, and number\n     * @param {Number} zone: the foundation zone (from 0-3) on to which the player is trying to place the card\n     */\n\n    checkSequence = (card, zone) => {\n        let top = this.state.foundations[zone][0]\n        return (top.suit === card.suit && top.number + 1 === card.number)\n    }\n\n    /*\n     * @param {Number} maneuver: the maneuver zone (from 0-7) from which the player is trying to remove the card from\n     * @param {Number} foundation: the foundation zone (from 0-7) on to which the player is trying to place the card\n     */\n\n    trySequence = (maneuver, foundation) => {\n        if (this.checkSequence(this.state.maneuvers[maneuver][0], foundation)){\n            let maneuvers = this.state.maneuvers\n            let foundations = this.state.foundations\n            foundations[foundation].unshift(maneuvers[maneuver].shift())\n            this.setState({\n                maneuvers: maneuvers,\n                foundations: foundations\n            })\n        }\n    }\n\n    /*\n     * @param {Number} zone: the maneuver zone (from 0-7) on to which the player is trying to place the card\n     */\n\n    tryLayer = zone => {\n        if (this.state.deck.length > 0){\n            let deck = this.state.deck\n            let maneuvers = this.state.maneuvers\n            maneuvers[zone].unshift(deck.shift())\n            this.setState({\n                maneuvers: maneuvers,\n                deck: deck\n            })\n            if (deck.length === 0){\n                this.setState({stage: \"sequence\"})\n            }\n        }\n    }\n\n    getNumAvailableMoves = () => {\n        let moves = 0\n        for (let i = 0; i < this.state.maneuvers.length; i++){\n            if (this.state.maneuvers[i].length === 0){\n                continue\n            }\n            let card = this.state.maneuvers[i][0]\n            for (let j = 0; j < this.state.foundations.length; j++){\n                if (this.checkSequence(card, j)){\n                    moves++\n                }\n            }\n        }\n        return moves\n    }\n\n    getGameState = () => {\n        if (!this.getNumAvailableMoves()){\n            for (let i = 0; i < 4; i++){\n                if (this.state.foundations[i].length !== 13){\n                    return \"unwinnable\"\n                }\n            }\n            return \"won!\"\n        }\n        else{\n            return \"winnable\"\n        }\n    }\n\n    handleManeuver = zone => {\n        if (this.state.stage === \"layer\"){\n            this.tryLayer(zone)\n        }\n        else if (this.state.stage === \"sequence\" && this.state.maneuvers[zone].length){\n            this.setState({selectedManeuver: zone})\n        }\n    }\n\n    handleFoundation = zone => {\n        if (this.state.stage === \"sequence\" && this.state.selectedManeuver !== null){\n            this.trySequence(this.state.selectedManeuver, zone)\n        }\n    }\n\n    render(){\n\t\treturn (\n            <Container className=\"game-container\" fluid>\n                <Row>\n                    <Col className=\"text-center text-md-left\" md={4}>\n                        <Card className=\"mx-auto mx-md-0\" card={this.state.deck[0]}/>\n                        <br />\n                        <ul className=\"list-unstyled mt-1\">\n                            <li>stage: {this.state.stage}</li>\n                            <li>cards left in deck: {this.state.deck.length}</li>\n                            {this.state.stage === \"sequence\" && <li>game state: {this.getGameState()}</li>}\n                            {this.state.selectedManeuver !== null && <li>selected maneuver: {this.state.selectedManeuver}</li>}\n                        </ul>\n                        <Button className=\"mt-2\" onClick={this.resetGame}>Restart Game</Button>\n                    </Col>\n                    <Col md={8}>\n                        <Row>\n                            {\n                                [0,1,2,3].map((value) => {\n                                    return (\n                                        <Col className=\"my-2 mt-md-0\" key={value} xs={6} md={3}>\n                                            <Card \n                                                card={this.state.foundations[value][0]} \n                                                num={value} \n                                                handler={(zone) => this.handleFoundation(zone)}/>\n                                        </Col>\n                                    )\n                                })\n                            }\n                        </Row>\n                        <hr className=\"divider\" />\n                        <Row className=\"my-2\">\n                            {\n                                [0,1,2,3].map((value) => {\n                                    return (\n                                        <Col className=\"my-2 mt-md-0\" key={value} xs={6} md={3}>\n                                            <Card \n                                                card={this.state.maneuvers[value][0]} \n                                                num={value} \n                                                handler={(zone) => this.handleManeuver(zone)}/>\n                                        </Col>\n                                    )\n                                })\n                            }\n                        </Row>\n                        <Row className=\"my-2\">\n                            {\n                                [4,5,6,7].map((value) => {\n                                    return (\n                                        <Col className=\"my-2 mt-md-0\" key={value} xs={6} md={3}>\n                                            <Card \n                                                card={this.state.maneuvers[value][0]} \n                                                num={value} \n                                                handler={(zone) => this.handleManeuver(zone)}/>\n                                        </Col>\n                                    )\n                                })\n                            }\n                        </Row>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from '../Game/Game';\nimport Container from 'react-bootstrap/Container';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nconst githubLink = \"https://github.com/malsf21/solitary-confinement\";\n\nfunction App() {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href={githubLink}><span role=\"img\" aria-label=\"a playing card\">🃏</span>Solitary Confinement</Navbar.Brand>\n        <Nav className=\"ml-auto\">\n          <Nav.Link href={githubLink} target=\"_blank\" rel=\"noopener noreferrer\">Source Code</Nav.Link>\n        </Nav>\n      </Navbar>\n      <Container>\n        <Game />\n        <p className=\"text-center mt-2\">\n            made by <a href=\"https://matthewwang.me\" target=\"_blank\" rel=\"noopener noreferrer\">matt wang</a> with react and react-bootstrap | cards by <a href=\"https://www.me.uk/cards/\" target=\"_blank\" rel=\"noopener noreferrer\">Adrian Kennard</a>\n        </p>\n      </Container>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}